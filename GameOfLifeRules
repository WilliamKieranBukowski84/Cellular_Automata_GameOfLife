import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * Class gameoflife, uses jpanel for graphics window, and an action listener to
 * do stuff when the timer runs out each time
 */
public class GameOfLife extends JPanel implements ActionListener {
	
	//variables for height and width of screen
	private static int width = Toolkit.getDefaultToolkit().getScreenSize().width;
	private static int height = Toolkit.getDefaultToolkit().getScreenSize().height - 100;
	
	//size of each cell
	private int gridDimension = 10;
	
	//rows and columns set to ints, size of window divided by cell dimension
	private int rows = (int) Math.floor(height / gridDimension);
	private int cols = (int) Math.floor(width / gridDimension);
	
	//arrays for grid, and next grid to be produced
	private Cell[][] grid;
	private Cell[][] next;
	
	//timer for 100 millisconds, set to gameoflife class
	Timer timer = new Timer(100, this);
	
	//game of life constructor
	public GameOfLife() {
		
		grid = new Cell[cols][rows];
		
		next = new Cell[cols][rows];
		
		//initRandomSetup();
		//rPentominoSetup();
		gliderGunSetup();
		
		timer.start();
	}
	
	//random number gen method, between 0 and 2 
	public int randomNumber() {
		Random random = new Random();
		int state = random.nextInt(2);
		return state;
	}

	//random setup initiator, generates a random set of cells to be alive to start
	public void initRandomSetup() {
		
		for(int i = 0; i < cols; i++)
		{
			for(int j = 0; j < rows; j++) {
				
				next[i][j] = new Cell(i, j, 0);
				
				if(i == 0 || j == 0 || i == (cols-1) || j == (rows-1)) {
					grid[i][j] = new Cell(i, j, 0);
				}
				else {
					grid[i][j] = new Cell(i, j, randomNumber());
				}
				
			}
		}
	}
	
	//pentomino setup, generates a set of 5 cells living to start
	public void rPentominoSetup() {
		  for(int i = 0; i < cols; i++) {
	        	
	            for(int j = 0; j < rows; j++) {
	            	
	            	next[i][j] = new Cell(i, j, 0);
	            	
	            	
	            	if(i == 0 || j == 0 || i == (cols-1) || j == (rows-1))
	            	{
	            		grid[i][j] = new Cell(i, j, 0);
	            		
	            	}
	            	else if (i == cols / 2 && j == rows / 2)  // center
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if (i == (cols / 2) - 1 && j == (rows / 2))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if (i == (cols / 2) - 1 && j == (rows / 2) + 1)
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if (i == (cols / 2) - 1 && j == (rows / 2) + 2)
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if (i == (cols / 2) - 2 && j == (rows / 2) + 1)
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else {
	            		grid[i][j] = new Cell(i, j, 0);
	            		
	            	}
	            }
	            
	        }
	}
	
	//glider setup, makes a glider gun
	public void gliderGunSetup() {
		 for(int i = 0; i < cols; i++) {
	        	
	            for(int j = 0; j < rows; j++) {
	            	
	            	next[i][j] = new Cell(i, j, 0);
	            	
	                
	            	if(i == 0 || j == 0 || i == (cols-1) || j == (rows-1))
	            	{
	            		grid[i][j] = new Cell(i, j, 0);
	            		
	            	}
	            	// 2x3 rectangle
	            	else if (i == (cols / 2) && j == (rows / 2) || i == (cols / 2) + 1 && j == (rows / 2) || (i == (cols / 2) + 1 && j == (rows / 2) + 1) || (i == (cols / 2) && j == (rows / 2) + 1) || (i == (cols / 2) + 1 && j == (rows / 2) + 2) || (i == (cols / 2) && j == (rows / 2) + 2))  // center
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if (i == (cols / 2) + 2 && j == (rows / 2) + 3)
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) + 4 && j == (rows / 2) + 3) || (i == (cols / 2) + 4 && j == (rows / 2) + 4))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) + 4 && j == (rows / 2) -1) || (i == (cols / 2) + 4 && j == (rows / 2) -2))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	// right square
	            	else if ((i == (cols / 2) + 14 && j == (rows / 2)) || (i == (cols / 2) + 14 && j == (rows / 2) + 1) || (i == (cols / 2) + 15 && j == (rows / 2)) || (i == (cols / 2) + 15 && j == (rows / 2) + 1))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	
	            	//circular object left half
	            	else if (i == (cols / 2) + 2 && j == (rows / 2) - 1)
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 7 && j == (rows / 2)) || (i == (cols / 2) - 8 && j == (rows / 2)))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 7 && j == (rows / 2) + 6) || (i == (cols / 2) - 8 && j == (rows / 2) + 6))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 9 && j == (rows / 2) + 5) || (i == (cols / 2) - 9 && j == (rows / 2) + 1))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 10 && j == (rows / 2) + 4) || (i == (cols / 2) - 10 && j == (rows / 2) + 2) ||  (i == (cols / 2) - 10 && j == (rows / 2) + 3))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	
	            	// circular object right half
	            	else if ((i == (cols / 2) - 6 && j == (rows / 2) + 3))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 5 && j == (rows / 2) + 1) || (i == (cols / 2) - 5 && j == (rows / 2) + 5))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 4 && j == (rows / 2) + 2) || (i == (cols / 2) - 4 && j == (rows / 2) + 3) || (i == (cols / 2) - 4 && j == (rows / 2) + 4))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	else if ((i == (cols / 2) - 3 && j == (rows / 2) + 3))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	
	            	// left square
	            	else if ((i == (cols / 2) - 19 && j == (rows / 2) + 2) || (i == (cols / 2) - 19 && j == (rows / 2) + 3) ||  (i == (cols / 2) - 20 && j == (rows / 2) + 2) ||  (i == (cols / 2) - 20 && j == (rows / 2) + 3))
	            	{
	            		grid[i][j] = new Cell(i, j, 1);
	            	}
	            	
	            	
	            	
	            	
	            	else {
	            		grid[i][j] = new Cell(i, j, 0);
	            		
	            		
	            	}
	            }
	        
	        }
	}
	
	//setup the grid for the next iteration of the evolution of the simulation
	public void nextIteration() {
		for(int x = 1; x < cols - 1; x++) {
			for(int y = 1; y < rows - 1; y++) {
				
				int neighbors = 0;
				
				for(int i = -1; i <= 1; i++) {
					for(int j = -1; j <= 1; j++) {
						neighbors += grid[x+i][y+j].state;
					}
				}
				
				neighbors -= grid[x][y].state;
				
				
				// The rules of Life!
				/*
				if ((grid[x][y].state == 1) && (neighbors <  2)) {
	    		    	next[x][y].state = 0;
	    		}
				else if {
					
				}
				*/
				

    		    if ((grid[x][y].state == 1) && (neighbors <  2)) {
    		    	next[x][y].state = 0;
    		    }
    		    else if ((grid[x][y].state == 1) && (neighbors ==  2)) {
    		    	next[x][y].state = 1;
    		    }
    		    else if ((grid[x][y].state == 1) && (neighbors ==  3)) {
    		    	next[x][y].state = 1;
    		    }
    		    else if ((grid[x][y].state == 1) && (neighbors >  3)) {
    		    	next[x][y].state = 0;
    		    }
    		    else if ((grid[x][y].state == 0) && (neighbors == 3)) {
    		    	next[x][y].state = 1;
    		    }
    		    else if (grid[x][y].state == 0) {
    		    	next[x][y].state = 0;
    		    }
				
				
			}
		}
		
		for(int x = 1; x < cols - 1; x++) {
			for(int y = 1; y < rows - 1; y++) {
				grid[x][y].state = next[x][y].state;
			}
		}
	}
	
	//create the grid by iterating through columns and rows
	void drawGrid(Graphics g) {
		
		Graphics2D g2d = (Graphics2D) g;
		
		for(int i = 0; i < cols; i++) {
			for(int j = 0; j < rows; j++) {
				grid[i][j].show(gridDimension, g2d);
			}
		}
		
	}
	
	//draw the grid black
	public void paint(Graphics g) {
		
		super.paint(g);
		drawGrid(g);
	}
			
	@Override
	public void actionPerformed(ActionEvent actionEvent) {
		if(actionEvent.getSource() == timer) {
			
			//when the timer runs out, nextiteration updates, adn repaint draws the new grid
			nextIteration();
			repaint();
		}
		
	}

}
